<?php

namespace App\Controller;

use App\Entity\GtUser;
use App\Form\GtUserType;
use App\Form\TaskDType;
use App\Repository\GtUserRepository;
use phpDocumentor\Reflection\Types\Null_;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

/**
 * @Route("/gt/user")
 */
class GtUserController extends AbstractController
{
    /**
     * @Route("/", name="app_gt_user_index", methods={"GET"})
     */
    public function index(GtUserRepository $gtUserRepository): Response
    {
        return $this->render('gt_user/index.html.twig', [
            'gt_users' => $gtUserRepository->findAll(),
        ]);
    }

    /**
     * @Route("/new", name="app_gt_user_new", methods={"GET", "POST"})
     */
    public function new(Request $request, GtUserRepository $gtUserRepository, UserPasswordEncoderInterface $passwordEncoder): Response
    {   $gtUser = new GtUser();

        $form = $this->createForm(GtUserType::class, $gtUser);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $image = $form->get('gtImage')->getData();
            $fileName = $this->generateUniqueFileName().'.'. $image->guessExtension();

            // moves the file to the directory where brochures are stored
            $image->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $gtUser->setGtImage($fileName);
            $gtUser->setPassword(
                $passwordEncoder->encodePassword(
                    $gtUser,
                    $form->get('password')->getData()
                )
            );

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($gtUser);
            $entityManager->flush();
            $gtUserRepository->add($gtUser);
            return $this->redirectToRoute('app_gt_user_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('gt_user/new.html.twig', [
            'gt_user' => $gtUser,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="app_gt_user_show", methods={"GET"})
     */
    public function show(GtUser $gtUser): Response
    {
        return $this->render('gt_user/show.html.twig', [
            'gt_user' => $gtUser,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="app_gt_user_edit", methods={"GET", "POST"})
     */
    public function edit(Request $request, GtUser $gtUser, GtUserRepository $gtUserRepository, UserPasswordEncoderInterface $passwordEncoder): Response
    {
         $dImage = $gtUser->getGtImage();
        $form = $this->createForm(GtUserType::class, $gtUser);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $image = $form->get('gtImage')->getData();

            if( $image){

                $fileName = $this->generateUniqueFileName().'.'. $image->guessExtension();
            // moves the file to the directory where brochures are stored
                $image->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );
            $gtUser->setGtImage($fileName);
            }else{
                $gtUser->setGtImage($dImage);
            }

            $gtUser->setTask($gtUser->getTaskToDO());

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($gtUser);
            $entityManager->flush();

            $gtUserRepository->add($gtUser);
            return $this->redirectToRoute('app_gt_user_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('gt_user/edit.html.twig', [
            'gt_user' => $gtUser,
            'form' => $form->createView(),
            'gt_user' => $gtUser,
        ]);
    }

    /**
     * @Route("/{id}", name="app_gt_user_delete", methods={"POST"})
     */
    public function delete(Request $request, GtUser $gtUser, GtUserRepository $gtUserRepository): Response
    {
        if ($this->isCsrfTokenValid('delete'.$gtUser->getId(), $request->request->get('_token'))) {
            $gtUserRepository->remove($gtUser);
        }

        return $this->redirectToRoute('app_gt_user_index', [], Response::HTTP_SEE_OTHER);
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    /**
     * @Route("/{id}/dispatch", name="app_gt_user_dispatch", methods={"GET", "POST"})
     */
    public function dispatch(Request $request, GtUser $gtUser, GtUserRepository $gtUserRepository, UserPasswordEncoderInterface $passwordEncoder): Response
    {
        $cat=$gtUser->getCategory();
        $form = $this->createForm(TaskDType::class, $gtUser,['cat' => $cat]);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {


            $gtUser->setTask($gtUser->getTaskToDO());
            $gtUser->getTask()->setDateStarted( new  \DateTimeImmutable("now") );

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($gtUser);
            $entityManager->flush();

            $gtUserRepository->add($gtUser);
            return $this->redirectToRoute('gtAdmin', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('gt_user/dispatch.html.twig', [
            'form' => $form->createView(),
            'gt_user' => $gtUser,
        ]);
    }
}
